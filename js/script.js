// Sample products data - ƒê·∫∑c s·∫£n T√¢y B·∫Øc
const products = [
    {
        id: 1,
        name: "Tam Th·∫•t Kh√¥ T√¢y B·∫Øc",
        price: 2800000,
        category: "herbal",
        image: "üåø",
        description: "Tam th·∫•t kh√¥ nguy√™n ch·∫•t t·ª´ v√πng cao T√¢y B·∫Øc, b·ªìi b·ªï s·ª©c kh·ªèe"
    },
    {
        id: 2,
        name: "H√† Th·ªß √î R·ª´ng",
        price: 1200000,
        category: "herbal",
        image: "üçÉ",
        description: "H√† th·ªß √¥ r·ª´ng gi√†, t·ªët cho t√≥c v√† s·ª©c kh·ªèe gan th·∫≠n"
    },
    {
        id: 3,
        name: "M·∫≠t Ong R·ª´ng Nguy√™n Ch·∫•t",
        price: 450000,
        category: "food",
        image: "üçØ",
        description: "M·∫≠t ong r·ª´ng t·ª± nhi√™n t·ª´ c√°c lo√†i hoa r·ª´ng T√¢y B·∫Øc"
    },
    {
        id: 4,
        name: "S√¢m T·ªë N·ªØ",
        price: 3200000,
        category: "herbal",
        image: "üå±",
        description: "S√¢m t·ªë n·ªØ qu√Ω hi·∫øm, t·ªët cho ph√°i n·ªØ, ƒëi·ªÅu h√≤a n·ªôi ti·∫øt"
    },
    {
        id: 5,
        name: "Ba K√≠ch T√≠m",
        price: 1800000,
        category: "herbal",
        image: "üåø",
        description: "Ba k√≠ch t√≠m r·ª´ng t·ª± nhi√™n, tƒÉng c∆∞·ªùng sinh l·ª±c nam gi·ªõi"
    },
    {
        id: 6,
        name: "R∆∞·ª£u M·∫≠n T√¢y B·∫Øc",
        price: 680000,
        category: "drink",
        image: "üç∑",
        description: "R∆∞·ª£u m·∫≠n th∆°m ngon t·ª´ m·∫≠n r·ª´ng T√¢y B·∫Øc, 29 ƒë·ªô"
    },
    {
        id: 7,
        name: "S√¢m Ng·ªçc Linh",
        price: 5500000,
        category: "herbal",
        image: "üåø",
        description: "S√¢m Ng·ªçc Linh ch√≠nh g·ªëc, qu√Ω hi·∫øm v√† t·ªët cho s·ª©c kh·ªèe"
    },
    {
        id: 8,
        name: "Tam Th·∫•t Hoang",
        price: 3800000,
        category: "herbal",
        image: "üå±",
        description: "Tam th·∫•t hoang t·ª± nhi√™n, gi√° tr·ªã dinh d∆∞·ª°ng cao"
    },
    {
        id: 9,
        name: "Qu·∫£ Tr√¢u C·ªï Kh√¥",
        price: 320000,
        category: "food",
        image: "ü´ê",
        description: "Qu·∫£ tr√¢u c·ªï kh√¥ t·ª± nhi√™n, gi√†u vitamin v√† ch·∫•t ch·ªëng oxy h√≥a"
    },
    {
        id: 10,
        name: "Qu·∫£ Sim R·ª´ng",
        price: 280000,
        category: "food",
        image: "ü´ê",
        description: "Qu·∫£ sim r·ª´ng t∆∞∆°i, h∆∞∆°ng v·ªã ƒë·∫∑c tr∆∞ng v√πng cao"
    },
    {
        id: 11,
        name: "N·∫•m Lim Xanh",
        price: 2200000,
        category: "herbal",
        image: "ÔøΩ",
        description: "N·∫•m lim xanh r·ª´ng qu√Ω hi·∫øm, tƒÉng c∆∞·ªùng mi·ªÖn d·ªãch"
    },
    {
        id: 12,
        name: "Th·ªãt Tr√¢u Kh√¥",
        price: 750000,
        category: "food",
        image: "ü•©",
        description: "Th·ªãt tr√¢u kh√¥ th∆°m ngon, kh√¥ng ch·∫•t b·∫£o qu·∫£n"
    },
    {
        id: 13,
        name: "Th·ªãt L·ª£n Kh√¥",
        price: 620000,
        category: "food",
        image: "ü•©",
        description: "Th·ªãt l·ª£n kh√¥ truy·ªÅn th·ªëng, ƒë·∫≠m ƒë√† h∆∞∆°ng v·ªã"
    },
    {
        id: 14,
        name: "Th·ªãt B√≤ Kh√¥",
        price: 890000,
        category: "food",
        image: "ü•©",
        description: "Th·ªãt b√≤ kh√¥ cao c·∫•p, gi√†u protein"
    },
    {
        id: 15,
        name: "H·∫°t K·ª≥ T·ª≠ ƒê·ªè",
        price: 380000,
        category: "herbal",
        image: "üî¥",
        description: "H·∫°t k·ª≥ t·ª≠ ƒë·ªè Ninh H·∫°, t·ªët cho m·∫Øt v√† gan"
    },
    {
        id: 16,
        name: "Nhung H∆∞∆°u Ng√¢m M·∫≠t Ong",
        price: 4200000,
        category: "herbal",
        image: "ü¶å",
        description: "Nhung h∆∞∆°u ng√¢m m·∫≠t ong t·ª± nhi√™n, b·ªï d∆∞∆°ng tr√°ng th·∫≠n"
    },
    {
        id: 17,
        name: "S√¢m Cau",
        price: 1600000,
        category: "herbal",
        image: "ÔøΩ",
        description: "S√¢m cau r·ª´ng t·ª± nhi√™n, tƒÉng c∆∞·ªùng sinh l·ª±c"
    },
    {
        id: 18,
        name: "Tinh D·∫ßu Qu·∫ø",
        price: 420000,
        category: "oil",
        image: "üß¥",
        description: "Tinh d·∫ßu qu·∫ø nguy√™n ch·∫•t, kh√°ng khu·∫©n t·ª± nhi√™n"
    },
    {
        id: 19,
        name: "Tinh D·∫ßu X·∫£",
        price: 350000,
        category: "oil",
        image: "üß¥",
        description: "Tinh d·∫ßu x·∫£ th∆°m m√°t, ƒëu·ªïi mu·ªói hi·ªáu qu·∫£"
    },
    {
        id: 20,
        name: "Ng√¥ T√≠m Cay",
        price: 180000,
        category: "food",
        image: "üåΩ",
        description: "Ng√¥ t√≠m cay ƒë·∫∑c s·∫£n T√¢y B·∫Øc, v·ªã ng·ªçt t·ª± nhi√™n"
    },
    {
        id: 21,
        name: "Trinh N·ªØ Ho√†ng Cung",
        price: 2800000,
        category: "herbal",
        image: "ÔøΩ",
        description: "Trinh n·ªØ ho√†ng cung qu√Ω hi·∫øm, d∆∞Ïñë nhan s·∫Øc ph·ª• n·ªØ"
    }
];

// Shopping cart
let cart = [];

// DOM elements
const productsGrid = document.getElementById('productsGrid');
const cartModal = document.getElementById('cartModal');
const cartItems = document.getElementById('cartItems');
const cartTotal = document.getElementById('cartTotal');
const cartCount = document.querySelector('.cart-count');
const contactForm = document.getElementById('contactForm');

// Initialize the website
document.addEventListener('DOMContentLoaded', function() {
    displayProducts(products);
    updateCartDisplay();
    initializeNavigation();
});

// Display products
function displayProducts(productsToShow) {
    productsGrid.innerHTML = '';
    
    productsToShow.forEach(product => {
        const productCard = createProductCard(product);
        productsGrid.appendChild(productCard);
    });
}

// Create product card
function createProductCard(product) {
    const productCard = document.createElement('div');
    productCard.className = 'product-card';
    productCard.dataset.category = product.category;
    
    productCard.innerHTML = `
        <div class="product-image">
            <span style="font-size: 4rem;">${product.image}</span>
        </div>
        <div class="product-info">
            <h3>${product.name}</h3>
            <p>${product.description}</p>
            <div class="product-price">${formatPrice(product.price)}</div>
            <button class="add-to-cart" onclick="addToCart(${product.id})">
                <i class="fas fa-shopping-cart"></i> Th√™m v√†o gi·ªè
            </button>
        </div>
    `;
    
    return productCard;
}

// Format price to Vietnamese currency
function formatPrice(price) {
    return new Intl.NumberFormat('vi-VN', {
        style: 'currency',
        currency: 'VND'
    }).format(price);
}

// Filter products
function filterProducts(category) {
    const filterBtns = document.querySelectorAll('.filter-btn');
    filterBtns.forEach(btn => btn.classList.remove('active'));
    
    // Add active class to clicked button
    event.target.classList.add('active');
    
    if (category === 'all') {
        displayProducts(products);
    } else {
        const filteredProducts = products.filter(product => product.category === category);
        displayProducts(filteredProducts);
    }
}

// Add to cart
function addToCart(productId) {
    const product = products.find(p => p.id === productId);
    const existingItem = cart.find(item => item.id === productId);
    
    if (existingItem) {
        existingItem.quantity += 1;
    } else {
        cart.push({
            ...product,
            quantity: 1
        });
    }
    
    updateCartDisplay();
    showNotification('ƒê√£ th√™m ƒë·∫∑c s·∫£n v√†o gi·ªè h√†ng!');
}

// Update cart display
function updateCartDisplay() {
    cartCount.textContent = cart.reduce((total, item) => total + item.quantity, 0);
    displayCartItems();
    updateCartTotal();
}

// Display cart items
function displayCartItems() {
    if (cart.length === 0) {
        cartItems.innerHTML = '<div class="empty-cart">Gi·ªè h√†ng tr·ªëng</div>';
        return;
    }
    
    cartItems.innerHTML = '';
    
    cart.forEach(item => {
        const cartItem = document.createElement('div');
        cartItem.className = 'cart-item';
        
        cartItem.innerHTML = `
            <div class="cart-item-info">
                <h4>${item.name}</h4>
                <div class="cart-item-price">${formatPrice(item.price)}</div>
            </div>
            <div class="cart-item-controls">
                <button class="quantity-btn" onclick="updateQuantity(${item.id}, -1)">-</button>
                <span class="quantity">${item.quantity}</span>
                <button class="quantity-btn" onclick="updateQuantity(${item.id}, 1)">+</button>
                <button class="remove-item" onclick="removeFromCart(${item.id})">X√≥a</button>
            </div>
        `;
        
        cartItems.appendChild(cartItem);
    });
}

// Update quantity
function updateQuantity(productId, change) {
    const item = cart.find(item => item.id === productId);
    if (item) {
        item.quantity += change;
        if (item.quantity <= 0) {
            removeFromCart(productId);
        } else {
            updateCartDisplay();
        }
    }
}

// Remove from cart
function removeFromCart(productId) {
    cart = cart.filter(item => item.id !== productId);
    updateCartDisplay();
    showNotification('ƒê√£ x√≥a ƒë·∫∑c s·∫£n kh·ªèi gi·ªè h√†ng!');
}

// Update cart total
function updateCartTotal() {
    const total = cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
    cartTotal.textContent = formatPrice(total);
}

// Toggle cart modal
function toggleCart() {
    cartModal.style.display = cartModal.style.display === 'block' ? 'none' : 'block';
}

// Close cart when clicking outside
cartModal.addEventListener('click', function(e) {
    if (e.target === cartModal) {
        toggleCart();
    }
});

// Checkout
function checkout() {
    if (cart.length === 0) {
        showNotification('Gi·ªè h√†ng tr·ªëng!', 'error');
        return;
    }
    
    const total = cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
    const orderDetails = cart.map(item => `${item.name} x${item.quantity}`).join('\n');
    
    // Create order message
    const message = `
ƒê∆°n h√†ng ƒë·∫∑c s·∫£n T√¢y B·∫Øc:
${orderDetails}

T·ªïng c·ªông: ${formatPrice(total)}

C·∫£m ∆°n qu√Ω kh√°ch ƒë√£ l·ª±a ch·ªçn ƒë·∫∑c s·∫£n T√¢y B·∫Øc c·ªßa ch√∫ng t√¥i!
Ch√∫ng t√¥i s·∫Ω li√™n h·ªá x√°c nh·∫≠n ƒë∆°n h√†ng trong th·ªùi gian s·ªõm nh·∫•t.
    `.trim();
    
    // You can integrate with a real payment system here
    alert(`C·∫£m ∆°n qu√Ω kh√°ch ƒë√£ ƒë·∫∑t h√†ng!\n\n${message}\n\nCh√∫ng t√¥i cam k·∫øt cung c·∫•p ƒë·∫∑c s·∫£n T√¢y B·∫Øc ch·∫•t l∆∞·ª£ng cao nh·∫•t.`);
    
    // Clear cart
    cart = [];
    updateCartDisplay();
    toggleCart();
}

// Smooth scrolling
function scrollToProducts() {
    document.getElementById('products').scrollIntoView({
        behavior: 'smooth'
    });
}

// Initialize navigation
function initializeNavigation() {
    // Smooth scrolling for navigation links
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function (e) {
            e.preventDefault();
            const target = document.querySelector(this.getAttribute('href'));
            if (target) {
                target.scrollIntoView({
                    behavior: 'smooth',
                    block: 'start'
                });
            }
        });
    });
    
    // Update navigation on scroll
    window.addEventListener('scroll', function() {
        const sections = document.querySelectorAll('section[id]');
        const navLinks = document.querySelectorAll('.nav-menu a[href^="#"]');
        
        let current = '';
        sections.forEach(section => {
            const sectionTop = section.offsetTop - 100;
            const sectionHeight = section.clientHeight;
            if (scrollY >= sectionTop && scrollY < sectionTop + sectionHeight) {
                current = section.getAttribute('id');
            }
        });
        
        navLinks.forEach(link => {
            link.classList.remove('active');
            if (link.getAttribute('href') === '#' + current) {
                link.classList.add('active');
            }
        });
    });
}

// Contact form submission
contactForm.addEventListener('submit', function(e) {
    e.preventDefault();
    
    const formData = {
        name: document.getElementById('name').value,
        phone: document.getElementById('phone').value,
        email: document.getElementById('email').value,
        message: document.getElementById('message').value
    };
    
    // Here you would typically send the data to a server
    console.log('Form submitted:', formData);
    
    showNotification('C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá! Ch√∫ng t√¥i s·∫Ω ph·∫£n h·ªìi s·ªõm nh·∫•t c√≥ th·ªÉ.');
    
    // Reset form
    contactForm.reset();
});

// Show notification
function showNotification(message, type = 'success') {
    // Create notification element
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.style.cssText = `
        position: fixed;
        top: 100px;
        right: 20px;
        background: ${type === 'success' ? '#2ecc71' : '#e74c3c'};
        color: white;
        padding: 1rem 1.5rem;
        border-radius: 5px;
        box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        z-index: 3000;
        animation: slideInRight 0.3s ease;
    `;
    
    notification.textContent = message;
    document.body.appendChild(notification);
    
    // Remove notification after 3 seconds
    setTimeout(() => {
        notification.style.animation = 'slideOutRight 0.3s ease';
        setTimeout(() => {
            document.body.removeChild(notification);
        }, 300);
    }, 3000);
}

// Add CSS for notifications
const style = document.createElement('style');
style.textContent = `
    @keyframes slideInRight {
        from {
            transform: translateX(100%);
            opacity: 0;
        }
        to {
            transform: translateX(0);
            opacity: 1;
        }
    }
    
    @keyframes slideOutRight {
        from {
            transform: translateX(0);
            opacity: 1;
        }
        to {
            transform: translateX(100%);
            opacity: 0;
        }
    }
`;
document.head.appendChild(style);

// Search functionality (bonus feature)
function searchProducts(query) {
    const filteredProducts = products.filter(product =>
        product.name.toLowerCase().includes(query.toLowerCase()) ||
        product.description.toLowerCase().includes(query.toLowerCase())
    );
    displayProducts(filteredProducts);
}

// Mobile menu toggle (if needed)
function toggleMobileMenu() {
    const navMenu = document.querySelector('.nav-menu');
    navMenu.classList.toggle('active');
}
