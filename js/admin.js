// Admin Panel JavaScript
class AdminPanel {
    constructor() {
        this.products = [];
        this.originalProducts = [];
        this.isLoggedIn = false;
        this.init();
    }

    init() {
        // Load products from main script
        this.loadProducts();
        this.setupEventListeners();
        this.checkLoginStatus();
        this.updateStats();
    }

    loadProducts() {
        // Products data (from main script.js)
        this.originalProducts = [
            { id: 1, name: "Tam th·∫•t B·∫Øc th√°i l√°t", category: "herbal", price: 1300000, originalPrice: 1300000, image: "images/tam that bac thai lat 1tr3 1kg.jpg", description: "Tam th·∫•t B·∫Øc Th√°i Lat cao c·∫•p t·ª´ T√¢y B·∫Øc", unit: "1kg" },
            { id: 2, name: "H√† th·ªß √¥", category: "herbal", price: 80000, originalPrice: 80000, image: "üçÉ", description: "H√† th·ªß √¥ t·ª± nhi√™n", unit: "100g" },
            { id: 3, name: "M·∫≠t ong r·ª´ng U Minh", category: "food", price: 150000, originalPrice: 150000, image: "üçØ", description: "M·∫≠t ong r·ª´ng nguy√™n ch·∫•t", unit: "500ml" },
            { id: 4, name: "Th·∫£o qu·∫£", category: "herbal", price: 95000, originalPrice: 95000, image: "ÔøΩ", description: "Th·∫£o qu·∫£ kh√¥ T√¢y B·∫Øc", unit: "100g" },
            { id: 5, name: "ƒê√¥ng tr√πng h·∫° th·∫£o", category: "herbal", price: 350000, originalPrice: 350000, image: "ÔøΩ", description: "ƒê√¥ng tr√πng h·∫° th·∫£o t·ª± nhi√™n", unit: "10g" },
            { id: 6, name: "N·∫•m linh chi ƒë·ªè", category: "herbal", price: 200000, originalPrice: 200000, image: "ÔøΩ", description: "N·∫•m linh chi ƒë·ªè T√¢y B·∫Øc", unit: "100g" },
            { id: 7, name: "S√¢m Ng·ªçc Linh", price: 5500000, originalPrice: 5500000, category: "herbal", image: "üåø", description: "S√¢m Ng·ªçc Linh ch√≠nh g·ªëc, qu√Ω hi·∫øm v√† t·ªët cho s·ª©c kh·ªèe" },
            { id: 8, name: "Tam Th·∫•t Hoang", price: 3800000, originalPrice: 3800000, category: "herbal", image: "üå±", description: "Tam th·∫•t hoang t·ª± nhi√™n, gi√° tr·ªã dinh d∆∞·ª°ng cao" },
            { id: 9, name: "M·∫Øc Ca Kh√¥", price: 320000, originalPrice: 320000, category: "food", image: "images/mac ca kho 320k 1 kg.jpg", description: "M·∫Øc ca kh√¥ t·ª± nhi√™n, gi√†u dinh d∆∞·ª°ng v√† ch·∫•t b√©o t·ªët", unit: "1kg" },
            { id: 10, name: "Qu·∫£ Sim R·ª´ng", price: 280000, originalPrice: 280000, category: "food", image: "ü´ê", description: "Qu·∫£ sim r·ª´ng t∆∞∆°i, h∆∞∆°ng v·ªã ƒë·∫∑c tr∆∞ng v√πng cao" },
            { id: 11, name: "N·∫•m Lim Xanh", price: 2200000, originalPrice: 2200000, category: "herbal", image: "ÔøΩ", description: "N·∫•m lim xanh r·ª´ng qu√Ω hi·∫øm, tƒÉng c∆∞·ªùng mi·ªÖn d·ªãch" },
            { id: 12, name: "Th·ªãt Tr√¢u Kh√¥", price: 750000, originalPrice: 750000, category: "food", image: "ü•©", description: "Th·ªãt tr√¢u kh√¥ th∆°m ngon, kh√¥ng ch·∫•t b·∫£o qu·∫£n" },
            { id: 13, name: "Th·ªãt L·ª£n Kh√¥", price: 620000, originalPrice: 620000, category: "food", image: "ü•©", description: "Th·ªãt l·ª£n kh√¥ truy·ªÅn th·ªëng, ƒë·∫≠m ƒë√† h∆∞∆°ng v·ªã" },
            { id: 14, name: "Th·ªãt B√≤ Kh√¥", price: 890000, originalPrice: 890000, category: "food", image: "ü•©", description: "Th·ªãt b√≤ kh√¥ cao c·∫•p, gi√†u protein" },
            { id: 15, name: "H·∫°t K·ª≥ T·ª≠ ƒê·ªè", price: 380000, originalPrice: 380000, category: "herbal", image: "üî¥", description: "H·∫°t k·ª≥ t·ª≠ ƒë·ªè Ninh H·∫°, t·ªët cho m·∫Øt v√† gan" },
            { id: 16, name: "Nhung H∆∞∆°u Ng√¢m M·∫≠t Ong", price: 4200000, originalPrice: 4200000, category: "herbal", image: "ü¶å", description: "Nhung h∆∞∆°u ng√¢m m·∫≠t ong t·ª± nhi√™n, b·ªï d∆∞∆°ng tr√°ng th·∫≠n" },
            { id: 17, name: "S√¢m Cau", price: 130000, originalPrice: 130000, category: "herbal", image: "images/sam cau 130k 1kg.jpg", description: "S√¢m cau r·ª´ng t·ª± nhi√™n, tƒÉng c∆∞·ªùng sinh l·ª±c", unit: "1kg" },
            { id: 18, name: "Tinh D·∫ßu Qu·∫ø Nguy√™n Ch·∫•t", price: 375000, originalPrice: 375000, category: "oil", image: "images/tinh dau que nguyen chat 375k 1 chai.jpg", description: "Tinh d·∫ßu qu·∫ø nguy√™n ch·∫•t, kh√°ng khu·∫©n t·ª± nhi√™n", unit: "1 chai" },
            { id: 19, name: "Tinh D·∫ßu X·∫£", price: 350000, originalPrice: 350000, category: "oil", image: "üß¥", description: "Tinh d·∫ßu x·∫£ th∆°m m√°t, ƒëu·ªïi mu·ªói hi·ªáu qu·∫£" },
            { id: 20, name: "Ng√¥ T√≠m Cay", price: 180000, originalPrice: 180000, category: "food", image: "üåΩ", description: "Ng√¥ t√≠m cay ƒë·∫∑c s·∫£n T√¢y B·∫Øc, v·ªã ng·ªçt t·ª± nhi√™n" },
            { id: 21, name: "Trinh N·ªØ Ho√†ng Cung", price: 2800000, originalPrice: 2800000, category: "herbal", image: "ÔøΩ", description: "Trinh n·ªØ ho√†ng cung qu√Ω hi·∫øm, d∆∞Ïñë nhan s·∫Øc ph·ª• n·ªØ" },
            { id: 22, name: "La Lam ƒê∆∞·ªùng Ho·∫∑c", price: 450000, originalPrice: 450000, category: "herbal", image: "images/la lam duong hoac 450k 1kg.jpg", description: "La lam ƒë∆∞·ªùng ho·∫∑c t·ª± nhi√™n t·ª´ v√πng cao T√¢y B·∫Øc", unit: "1kg" },
            { id: 23, name: "MƒÉng R√≥i", price: 185000, originalPrice: 185000, category: "food", image: "images/mang roi 185k 1kg.jpg", description: "MƒÉng r√≥i kh√¥ ƒë·∫∑c s·∫£n T√¢y B·∫Øc, v·ªã ng·ªçt t·ª± nhi√™n", unit: "1kg" },
            { id: 24, name: "S√¢m T·ªë N·ªØ", price: 650000, originalPrice: 650000, category: "herbal", image: "images/sam to nua 650k 1 kg.jpg", description: "S√¢m t·ªë n·ªØ qu√Ω hi·∫øm, t·ªët cho ph·ª• n·ªØ", unit: "1kg" }
        ];

        // Load saved products from localStorage
        const savedProducts = localStorage.getItem('adminProducts');
        if (savedProducts) {
            this.products = JSON.parse(savedProducts);
        } else {
            this.products = [...this.originalProducts];
        }
    }

    setupEventListeners() {
        // Login form
        const loginForm = document.getElementById('loginForm');
        if (loginForm) {
            loginForm.addEventListener('submit', (e) => this.handleLogin(e));
        }

        // Logout button
        const logoutBtn = document.getElementById('logoutBtn');
        if (logoutBtn) {
            logoutBtn.addEventListener('click', () => this.logout());
        }

        // View website button
        const viewWebsiteBtn = document.getElementById('viewWebsite');
        if (viewWebsiteBtn) {
            viewWebsiteBtn.addEventListener('click', () => {
                window.open('index.html', '_blank');
            });
        }

        // Search and filter
        const searchInput = document.getElementById('searchProduct');
        if (searchInput) {
            searchInput.addEventListener('input', () => this.filterProducts());
        }

        const categoryFilter = document.getElementById('categoryFilter');
        if (categoryFilter) {
            categoryFilter.addEventListener('change', () => this.filterProducts());
        }

        // Edit price form
        const editPriceForm = document.getElementById('editPriceForm');
        if (editPriceForm) {
            editPriceForm.addEventListener('submit', (e) => this.handlePriceEdit(e));
        }

        // Modal close events
        this.setupModalEvents();

        // Backup and restore
        const backupBtn = document.getElementById('backupData');
        if (backupBtn) {
            backupBtn.addEventListener('click', () => this.backupData());
        }

        const restoreBtn = document.getElementById('restoreData');
        if (restoreBtn) {
            restoreBtn.addEventListener('click', () => this.restoreData());
        }

        const resetAllBtn = document.getElementById('resetAll');
        if (resetAllBtn) {
            resetAllBtn.addEventListener('click', () => this.resetAllPrices());
        }
    }

    setupModalEvents() {
        // Close modals when clicking outside
        document.addEventListener('click', (e) => {
            if (e.target.classList.contains('admin-modal')) {
                this.closeModal(e.target.id);
            }
        });

        // Close button events
        document.querySelectorAll('.admin-close').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const modal = e.target.closest('.admin-modal');
                if (modal) {
                    this.closeModal(modal.id);
                }
            });
        });
    }

    checkLoginStatus() {
        const isLoggedIn = localStorage.getItem('adminLoggedIn') === 'true';
        if (isLoggedIn) {
            this.showDashboard();
        } else {
            this.showLogin();
        }
    }

    handleLogin(e) {
        e.preventDefault();
        const username = document.getElementById('adminUsername').value;
        const password = document.getElementById('adminPassword').value;

        // Simple authentication (in production, use proper authentication)
        if (username === 'admin' && password === 'admin123') {
            localStorage.setItem('adminLoggedIn', 'true');
            this.showDashboard();
            this.showNotification('ƒêƒÉng nh·∫≠p th√†nh c√¥ng!', 'success');
        } else {
            this.showNotification('T√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!', 'error');
        }
    }

    logout() {
        localStorage.removeItem('adminLoggedIn');
        this.showLogin();
        this.showNotification('ƒê√£ ƒëƒÉng xu·∫•t th√†nh c√¥ng!', 'info');
    }

    showLogin() {
        document.getElementById('loginModal').classList.add('active');
        document.getElementById('adminDashboard').classList.remove('active');
    }

    showDashboard() {
        document.getElementById('loginModal').classList.remove('active');
        document.getElementById('adminDashboard').classList.add('active');
        this.renderProducts();
        this.updateStats();
    }

    openModal(modalId) {
        const modal = document.getElementById(modalId);
        if (modal) {
            modal.classList.add('active');
        }
    }

    closeModal(modalId) {
        const modal = document.getElementById(modalId);
        if (modal) {
            modal.classList.remove('active');
        }
    }

    updateStats() {
        const totalProducts = this.products.length;
        const changedProducts = this.products.filter(p => p.price !== p.originalPrice).length;
        const avgPrice = Math.round(this.products.reduce((sum, p) => sum + p.price, 0) / totalProducts);
        const categories = [...new Set(this.products.map(p => p.category))].length;

        document.getElementById('totalProducts').textContent = totalProducts;
        document.getElementById('changedProducts').textContent = changedProducts;
        document.getElementById('avgPrice').textContent = this.formatPrice(avgPrice);
        document.getElementById('totalCategories').textContent = categories;
    }

    renderProducts() {
        const tbody = document.getElementById('productsTableBody');
        if (!tbody) return;

        tbody.innerHTML = '';

        const searchTerm = document.getElementById('searchProduct')?.value.toLowerCase() || '';
        const categoryFilter = document.getElementById('categoryFilter')?.value || 'all';

        let filteredProducts = this.products.filter(product => {
            const matchesSearch = product.name.toLowerCase().includes(searchTerm);
            const matchesCategory = categoryFilter === 'all' || product.category === categoryFilter;
            return matchesSearch && matchesCategory;
        });

        filteredProducts.forEach(product => {
            const row = document.createElement('tr');
            
            const priceChanged = product.price !== product.originalPrice;
            const priceChange = product.price - product.originalPrice;
            const priceChangePercent = ((priceChange / product.originalPrice) * 100).toFixed(1);

            row.innerHTML = `
                <td>
                    <div class="product-name">${product.name}</div>
                    <small class="text-muted">${product.description}</small>
                </td>
                <td>
                    <span class="product-category category-${product.category}">
                        ${this.getCategoryName(product.category)}
                    </span>
                </td>
                <td>
                    <div class="price-original">${this.formatPrice(product.originalPrice)}</div>
                </td>
                <td>
                    <div class="price-current ${priceChanged ? 'price-changed' : ''}">${this.formatPrice(product.price)}</div>
                    ${priceChanged ? `
                        <div class="change-indicator ${priceChange > 0 ? 'change-up' : 'change-down'}">
                            <i class="fas fa-arrow-${priceChange > 0 ? 'up' : 'down'}"></i>
                            ${priceChangePercent}%
                        </div>
                    ` : ''}
                </td>
                <td>
                    <button class="action-btn btn-edit" onclick="adminPanel.openEditModal(${product.id})" title="Ch·ªânh s·ª≠a gi√°">
                        <i class="fas fa-edit"></i>
                    </button>
                    <button class="action-btn btn-reset" onclick="adminPanel.resetPrice(${product.id})" title="Kh√¥i ph·ª•c gi√° g·ªëc">
                        <i class="fas fa-undo"></i>
                    </button>
                </td>
            `;

            tbody.appendChild(row);
        });
    }

    filterProducts() {
        this.renderProducts();
    }

    getCategoryName(category) {
        const categories = {
            herbal: 'D∆∞·ª£c li·ªáu',
            food: 'Th·ª±c ph·∫©m',
            drink: 'ƒê·ªì u·ªëng',
            oil: 'Tinh d·∫ßu'
        };
        return categories[category] || category;
    }

    openEditModal(productId) {
        const product = this.products.find(p => p.id === productId);
        if (!product) return;

        document.getElementById('editProductId').value = product.id;
        document.getElementById('editProductName').value = product.name;
        document.getElementById('editOriginalPrice').value = product.originalPrice;
        document.getElementById('editCurrentPrice').value = product.price;

        this.openModal('editPriceModal');
    }

    handlePriceEdit(e) {
        e.preventDefault();
        
        const productId = parseInt(document.getElementById('editProductId').value);
        const newPrice = parseInt(document.getElementById('editCurrentPrice').value);

        if (newPrice < 0) {
            this.showNotification('Gi√° kh√¥ng th·ªÉ √¢m!', 'error');
            return;
        }

        const product = this.products.find(p => p.id === productId);
        if (product) {
            const oldPrice = product.price;
            product.price = newPrice;
            
            this.saveProducts();
            this.renderProducts();
            this.updateStats();
            this.closeModal('editPriceModal');
            
            this.showNotification(
                `ƒê√£ c·∫≠p nh·∫≠t gi√° ${product.name} t·ª´ ${this.formatPrice(oldPrice)} th√†nh ${this.formatPrice(newPrice)}`,
                'success'
            );
        }
    }

    resetPrice(productId) {
        const product = this.products.find(p => p.id === productId);
        if (product) {
            if (confirm(`Kh√¥i ph·ª•c gi√° g·ªëc cho ${product.name}?`)) {
                product.price = product.originalPrice;
                this.saveProducts();
                this.renderProducts();
                this.updateStats();
                this.showNotification(`ƒê√£ kh√¥i ph·ª•c gi√° g·ªëc cho ${product.name}`, 'success');
            }
        }
    }

    resetAllPrices() {
        if (confirm('B·∫°n c√≥ ch·∫Øc mu·ªën kh√¥i ph·ª•c gi√° g·ªëc cho t·∫•t c·∫£ s·∫£n ph·∫©m?')) {
            this.products.forEach(product => {
                product.price = product.originalPrice;
            });
            this.saveProducts();
            this.renderProducts();
            this.updateStats();
            this.showNotification('ƒê√£ kh√¥i ph·ª•c gi√° g·ªëc cho t·∫•t c·∫£ s·∫£n ph·∫©m', 'success');
        }
    }

    saveProducts() {
        localStorage.setItem('adminProducts', JSON.stringify(this.products));
        
        // Also update the main website's products (if on same domain)
        try {
            localStorage.setItem('websiteProducts', JSON.stringify(this.products));
        } catch (e) {
            console.log('Could not update website products');
        }
    }

    backupData() {
        const backupData = {
            products: this.products,
            timestamp: new Date().toISOString(),
            version: '1.0'
        };

        const dataStr = JSON.stringify(backupData, null, 2);
        const dataBlob = new Blob([dataStr], { type: 'application/json' });
        const url = URL.createObjectURL(dataBlob);
        
        const link = document.createElement('a');
        link.href = url;
        link.download = `backup-products-${new Date().toISOString().split('T')[0]}.json`;
        link.click();
        
        URL.revokeObjectURL(url);
        this.showNotification('ƒê√£ t·∫£i xu·ªëng file backup', 'success');
    }

    restoreData() {
        const input = document.createElement('input');
        input.type = 'file';
        input.accept = '.json';
        
        input.onchange = (e) => {
            const file = e.target.files[0];
            if (!file) return;

            const reader = new FileReader();
            reader.onload = (e) => {
                try {
                    const backupData = JSON.parse(e.target.result);
                    
                    if (backupData.products && Array.isArray(backupData.products)) {
                        if (confirm('Kh√¥i ph·ª•c d·ªØ li·ªáu s·∫Ω ghi ƒë√® l√™n d·ªØ li·ªáu hi·ªán t·∫°i. B·∫°n c√≥ ch·∫Øc?')) {
                            this.products = backupData.products;
                            this.saveProducts();
                            this.renderProducts();
                            this.updateStats();
                            this.showNotification('ƒê√£ kh√¥i ph·ª•c d·ªØ li·ªáu th√†nh c√¥ng', 'success');
                        }
                    } else {
                        this.showNotification('File backup kh√¥ng h·ª£p l·ªá', 'error');
                    }
                } catch (error) {
                    this.showNotification('L·ªói ƒë·ªçc file backup', 'error');
                }
            };
            reader.readAsText(file);
        };
        
        input.click();
    }

    formatPrice(price) {
        return new Intl.NumberFormat('vi-VN', {
            style: 'currency',
            currency: 'VND'
        }).format(price);
    }

    showNotification(message, type = 'info') {
        const notification = document.getElementById('adminNotification');
        const messageEl = document.getElementById('notificationMessage');
        
        if (notification && messageEl) {
            messageEl.textContent = message;
            notification.className = `admin-notification show ${type}`;
            
            // Auto hide after 5 seconds
            setTimeout(() => {
                notification.classList.remove('show');
            }, 5000);
        }
    }

    closeNotification() {
        const notification = document.getElementById('adminNotification');
        if (notification) {
            notification.classList.remove('show');
        }
    }

    // Excel Export/Import Functions
    exportToExcel() {
        const exportData = this.products.map(product => ({
            'ID': product.id,
            'T√™n s·∫£n ph·∫©m': product.name,
            'Danh m·ª•c': product.category,
            'Gi√° g·ªëc': product.originalPrice,
            'Gi√° hi·ªán t·∫°i': product.price,
            'H√¨nh ·∫£nh': product.image,
            'M√¥ t·∫£': product.description,
            'ƒê∆°n v·ªã': product.unit || ''
        }));

        // Create CSV content
        const headers = Object.keys(exportData[0]);
        const csvContent = [
            headers.join(','),
            ...exportData.map(row => 
                headers.map(header => {
                    let cell = row[header] || '';
                    // Escape commas and quotes
                    if (typeof cell === 'string' && (cell.includes(',') || cell.includes('"'))) {
                        cell = `"${cell.replace(/"/g, '""')}"`;
                    }
                    return cell;
                }).join(',')
            )
        ].join('\n');

        // Download file
        const blob = new Blob(['\ufeff' + csvContent], { type: 'text/csv;charset=utf-8;' });
        const link = document.createElement('a');
        const url = URL.createObjectURL(blob);
        link.setAttribute('href', url);
        link.setAttribute('download', `dacsantaybac_products_${new Date().toISOString().split('T')[0]}.csv`);
        link.style.visibility = 'hidden';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        
        this.showNotification('ƒê√£ xu·∫•t file Excel (CSV) th√†nh c√¥ng!', 'success');
    }

    downloadTemplate() {
        const templateData = [
            {
                'ID': 1,
                'T√™n s·∫£n ph·∫©m': 'Tam th·∫•t kh√¥',
                'Danh m·ª•c': 'herbal',
                'Gi√° g·ªëc': 120000,
                'Gi√° hi·ªán t·∫°i': 120000,
                'H√¨nh ·∫£nh': 'üåø',
                'M√¥ t·∫£': 'Tam th·∫•t kh√¥ cao c·∫•p t·ª´ T√¢y B·∫Øc',
                'ƒê∆°n v·ªã': '100g'
            },
            {
                'ID': 2,
                'T√™n s·∫£n ph·∫©m': 'M·∫≠t ong r·ª´ng',
                'Danh m·ª•c': 'food',
                'Gi√° g·ªëc': 250000,
                'Gi√° hi·ªán t·∫°i': 250000,
                'H√¨nh ·∫£nh': 'images/mat-ong-rung.jpg',
                'M√¥ t·∫£': 'M·∫≠t ong r·ª´ng nguy√™n ch·∫•t',
                'ƒê∆°n v·ªã': '500ml'
            }
        ];

        const headers = Object.keys(templateData[0]);
        const csvContent = [
            headers.join(','),
            ...templateData.map(row => 
                headers.map(header => {
                    let cell = row[header] || '';
                    if (typeof cell === 'string' && (cell.includes(',') || cell.includes('"'))) {
                        cell = `"${cell.replace(/"/g, '""')}"`;
                    }
                    return cell;
                }).join(',')
            )
        ].join('\n');

        const blob = new Blob(['\ufeff' + csvContent], { type: 'text/csv;charset=utf-8;' });
        const link = document.createElement('a');
        const url = URL.createObjectURL(blob);
        link.setAttribute('href', url);
        link.setAttribute('download', 'template_dacsantaybac_products.csv');
        link.style.visibility = 'hidden';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        
        this.showNotification('ƒê√£ t·∫£i file m·∫´u Excel (CSV)!', 'info');
    }

    openImportModal() {
        // Create import modal if not exists
        if (!document.getElementById('importModal')) {
            this.createImportModal();
        }
        document.getElementById('importModal').style.display = 'flex';
    }

    createImportModal() {
        const modal = document.createElement('div');
        modal.id = 'importModal';
        modal.className = 'admin-modal';
        modal.innerHTML = `
            <div class="admin-modal-content" style="width: 500px;">
                <div class="admin-modal-header">
                    <h3><i class="fas fa-file-upload"></i> Import D·ªØ Li·ªáu Excel/CSV</h3>
                    <button class="admin-close" onclick="adminPanel.closeImportModal()">√ó</button>
                </div>
                
                <div class="admin-modal-body">
                    <div style="margin-bottom: 1rem;">
                        <label for="importFile">Ch·ªçn file CSV (.csv):</label>
                        <input type="file" id="importFile" accept=".csv" style="width: 100%; padding: 8px; margin-top: 5px;">
                        <small style="color: #666; margin-top: 5px; display: block;">
                            File ph·∫£i c√≥ c·∫•u tr√∫c: ID, T√™n s·∫£n ph·∫©m, Danh m·ª•c, Gi√° g·ªëc, Gi√° hi·ªán t·∫°i, H√¨nh ·∫£nh, M√¥ t·∫£, ƒê∆°n v·ªã
                        </small>
                    </div>
                    
                    <div style="margin-bottom: 1rem;">
                        <label>
                            <input type="checkbox" id="overwriteData" style="width: auto; margin-right: 10px;">
                            Ghi ƒë√® d·ªØ li·ªáu hi·ªán t·∫°i (n·∫øu kh√¥ng ch·ªçn s·∫Ω ch·ªâ c·∫≠p nh·∫≠t c√°c s·∫£n ph·∫©m c√≥ s·∫µn)
                        </label>
                    </div>
                    
                    <div style="display: flex; gap: 10px;">
                        <button class="btn btn-success" onclick="adminPanel.processImportFile()" style="flex: 1;">
                            <i class="fas fa-upload"></i> Import D·ªØ Li·ªáu
                        </button>
                        <button class="btn btn-secondary" onclick="adminPanel.closeImportModal()" style="flex: 1;">
                            <i class="fas fa-times"></i> H·ªßy
                        </button>
                    </div>
                </div>
            </div>
        `;
        document.body.appendChild(modal);
    }

    closeImportModal() {
        const modal = document.getElementById('importModal');
        if (modal) {
            modal.style.display = 'none';
            const fileInput = document.getElementById('importFile');
            if (fileInput) fileInput.value = '';
            const checkbox = document.getElementById('overwriteData');
            if (checkbox) checkbox.checked = false;
        }
    }

    processImportFile() {
        const fileInput = document.getElementById('importFile');
        const file = fileInput.files[0];
        
        if (!file) {
            this.showNotification('Vui l√≤ng ch·ªçn file ƒë·ªÉ import!', 'error');
            return;
        }

        const reader = new FileReader();
        reader.onload = (e) => {
            try {
                const csv = e.target.result;
                const lines = csv.split('\n');
                
                if (lines.length < 2) {
                    this.showNotification('File kh√¥ng c√≥ d·ªØ li·ªáu!', 'error');
                    return;
                }
                
                // Parse CSV
                const headers = lines[0].split(',').map(h => h.trim().replace(/["\uFEFF]/g, ''));
                const requiredColumns = ['ID', 'T√™n s·∫£n ph·∫©m', 'Danh m·ª•c', 'Gi√° g·ªëc', 'Gi√° hi·ªán t·∫°i'];
                const missingColumns = requiredColumns.filter(col => !headers.includes(col));
                
                if (missingColumns.length > 0) {
                    this.showNotification(`File thi·∫øu c√°c c·ªôt b·∫Øt bu·ªôc: ${missingColumns.join(', ')}`, 'error');
                    return;
                }
                
                const data = [];
                for (let i = 1; i < lines.length; i++) {
                    const line = lines[i].trim();
                    if (!line) continue;
                    
                    const values = this.parseCSVLine(line);
                    const row = {};
                    headers.forEach((header, index) => {
                        row[header] = values[index] || '';
                    });
                    data.push(row);
                }
                
                this.importProducts(data);
                
            } catch (error) {
                console.error('Error reading file:', error);
                this.showNotification('L·ªói ƒë·ªçc file! Vui l√≤ng ki·ªÉm tra format file.', 'error');
            }
        };
        
        reader.readAsText(file, 'UTF-8');
    }

    parseCSVLine(line) {
        const result = [];
        let current = '';
        let inQuotes = false;
        
        for (let i = 0; i < line.length; i++) {
            const char = line[i];
            const nextChar = line[i + 1];
            
            if (char === '"') {
                if (inQuotes && nextChar === '"') {
                    current += '"';
                    i++; // Skip next quote
                } else {
                    inQuotes = !inQuotes;
                }
            } else if (char === ',' && !inQuotes) {
                result.push(current.trim());
                current = '';
            } else {
                current += char;
            }
        }
        
        result.push(current.trim());
        return result;
    }

    importProducts(importData) {
        const overwrite = document.getElementById('overwriteData').checked;
        let imported = 0;
        let updated = 0;
        let errors = 0;
        
        importData.forEach(row => {
            try {
                const id = parseInt(row['ID']);
                const name = row['T√™n s·∫£n ph·∫©m']?.toString().trim();
                const category = row['Danh m·ª•c']?.toString().trim();
                const originalPrice = parseInt(row['Gi√° g·ªëc']);
                const currentPrice = parseInt(row['Gi√° hi·ªán t·∫°i']);
                const image = row['H√¨nh ·∫£nh']?.toString().trim() || '';
                const description = row['M√¥ t·∫£']?.toString().trim() || '';
                const unit = row['ƒê∆°n v·ªã']?.toString().trim() || '';
                
                // Validate data
                if (!id || !name || !category || isNaN(originalPrice) || isNaN(currentPrice)) {
                    errors++;
                    return;
                }
                
                // Check valid category
                const validCategories = ['herbal', 'food', 'oil', 'drink'];
                if (!validCategories.includes(category)) {
                    errors++;
                    return;
                }
                
                const existingIndex = this.products.findIndex(p => p.id === id);
                
                if (existingIndex >= 0) {
                    // Update existing product
                    if (overwrite) {
                        this.products[existingIndex] = {
                            id: id,
                            name: name,
                            category: category,
                            price: currentPrice,
                            originalPrice: originalPrice,
                            image: image,
                            description: description,
                            unit: unit
                        };
                    } else {
                        // Only update price
                        this.products[existingIndex].price = currentPrice;
                    }
                    updated++;
                } else if (overwrite) {
                    // Add new product
                    const newProduct = {
                        id: id,
                        name: name,
                        category: category,
                        price: currentPrice,
                        originalPrice: originalPrice,
                        image: image,
                        description: description,
                        unit: unit
                    };
                    
                    this.products.push(newProduct);
                    imported++;
                }
                
            } catch (error) {
                console.error('Error processing row:', row, error);
                errors++;
            }
        });
        
        // Save and refresh
        this.saveProducts();
        this.renderProducts();
        this.updateStats();
        this.closeImportModal();
        
        let message = `Import ho√†n th√†nh! `;
        if (imported > 0) message += `Th√™m m·ªõi: ${imported} s·∫£n ph·∫©m. `;
        if (updated > 0) message += `C·∫≠p nh·∫≠t: ${updated} s·∫£n ph·∫©m. `;
        if (errors > 0) message += `L·ªói: ${errors} d√≤ng.`;
        
        this.showNotification(message, imported > 0 || updated > 0 ? 'success' : 'warning');
    }
}

// Initialize admin panel when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    window.adminPanel = new AdminPanel();
});

// Global functions for button events
window.closeNotification = () => {
    if (window.adminPanel) {
        window.adminPanel.closeNotification();
    }
};

window.exportToExcel = () => {
    if (window.adminPanel) {
        window.adminPanel.exportToExcel();
    }
};

window.downloadTemplate = () => {
    if (window.adminPanel) {
        window.adminPanel.downloadTemplate();
    }
};

window.openImportModal = () => {
    if (window.adminPanel) {
        window.adminPanel.openImportModal();
    }
};
