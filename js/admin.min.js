// Admin Panel JavaScript
class AdminPanel {
    constructor() {
        this.products = [];
        this.originalProducts = [];
        this.isLoggedIn = false;
        this.init();
    }

    init() {
        // Load products from main script
        this.loadProducts();
        this.setupEventListeners();
        this.checkLoginStatus();
        this.updateStats();
    }

    loadProducts() {
        // Products data (from main script.js)
        this.originalProducts = [
            { id: 1, name: "Tam thất khô", category: "herbal", price: 120000, originalPrice: 120000, image: "images/tam-that-kho.jpg", description: "Tam thất khô cao cấp từ Tây Bắc", unit: "100g" },
            { id: 2, name: "Hà thủ ô", category: "herbal", price: 80000, originalPrice: 80000, image: "images/ha-thu-o.jpg", description: "Hà thủ ô tự nhiên", unit: "100g" },
            { id: 3, name: "Mật ong rừng U Minh", category: "food", price: 150000, originalPrice: 150000, image: "images/mat-ong-rung.jpg", description: "Mật ong rừng nguyên chất", unit: "500ml" },
            { id: 4, name: "Thảo quả", category: "herbal", price: 95000, originalPrice: 95000, image: "images/thao-qua.jpg", description: "Thảo quả khô Tây Bắc", unit: "100g" },
            { id: 5, name: "Đông trùng hạ thảo", category: "herbal", price: 350000, originalPrice: 350000, image: "images/dong-trung-ha-thao.jpg", description: "Đông trùng hạ thảo tự nhiên", unit: "10g" },
            { id: 6, name: "Nấm linh chi đỏ", category: "herbal", price: 200000, originalPrice: 200000, image: "images/nam-linh-chi.jpg", description: "Nấm linh chi đỏ Tây Bắc", unit: "100g" },
            { id: 7, name: "Sâm ngọc linh", category: "herbal", price: 180000, originalPrice: 180000, image: "images/sam-ngoc-linh.jpg", description: "Sâm ngọc linh cao cấp", unit: "50g" },
            { id: 8, name: "Trà shan tuyết cổ thụ", category: "drink", price: 250000, originalPrice: 250000, image: "images/tra-shan-tuyet.jpg", description: "Trà shan tuyết từ cây cổ thụ", unit: "100g" },
            { id: 9, name: "Dầu tràm Huế", category: "oil", price: 45000, originalPrice: 45000, image: "images/dau-tram-hue.jpg", description: "Dầu tràm nguyên chất Huế", unit: "10ml" },
            { id: 10, name: "Mắc khén", category: "food", price: 70000, originalPrice: 70000, image: "images/mac-khen.jpg", description: "Mắc khén thơm đặc trưng Tây Bắc", unit: "50g" },
            { id: 11, name: "Cao hổ cốt", category: "herbal", price: 290000, originalPrice: 290000, image: "images/cao-ho-cot.jpg", description: "Cao hổ cốt bổ xương khớp", unit: "100g" },
            { id: 12, name: "Thịt trâu gác bếp", category: "food", price: 320000, originalPrice: 320000, image: "images/thit-trau-gac-bep.jpg", description: "Thịt trâu gác bếp truyền thống", unit: "200g" },
            { id: 13, name: "Rượu cần Tây Bắc", category: "drink", price: 180000, originalPrice: 180000, image: "images/ruou-can.jpg", description: "Rượu cần truyền thống dân tộc", unit: "500ml" },
            { id: 14, name: "Bánh chưng lá dong", category: "food", price: 45000, originalPrice: 45000, image: "images/banh-chung-la-dong.jpg", description: "Bánh chưng lá dong thơm ngon", unit: "cái" },
            { id: 15, name: "Tinh dầu sả chanh", category: "oil", price: 85000, originalPrice: 85000, image: "images/tinh-dau-sa-chanh.jpg", description: "Tinh dầu sả chanh thiên nhiên", unit: "10ml" },
            { id: 16, name: "Nấm đông cô", category: "food", price: 120000, originalPrice: 120000, image: "images/nam-dong-co.jpg", description: "Nấm đông cô khô cao cấp", unit: "100g" },
            { id: 17, name: "Bột nghệ Hà Giang", category: "herbal", price: 35000, originalPrice: 35000, image: "images/bot-nghe.jpg", description: "Bột nghệ nguyên chất Hà Giang", unit: "100g" },
            { id: 18, name: "Măng khô", category: "food", price: 60000, originalPrice: 60000, image: "images/mang-kho.jpg", description: "Măng khô thơm ngon tự nhiên", unit: "200g" },
            { id: 19, name: "Trà hoa cúc", category: "drink", price: 55000, originalPrice: 55000, image: "images/tra-hoa-cuc.jpg", description: "Trá hoa cúc thanh mát", unit: "50g" },
            { id: 20, name: "Dầu dừa nguyên chất", category: "oil", price: 95000, originalPrice: 95000, image: "images/dau-dua.jpg", description: "Dầu dừa ép lạnh nguyên chất", unit: "200ml" },
            { id: 21, name: "Cao sao vàng", category: "herbal", price: 75000, originalPrice: 75000, image: "images/cao-sao-vang.jpg", description: "Cao sao vàng trị ho khản tiếng", unit: "lọ" }
        ];

        // Load saved products from localStorage
        const savedProducts = localStorage.getItem('adminProducts');
        if (savedProducts) {
            this.products = JSON.parse(savedProducts);
        } else {
            this.products = [...this.originalProducts];
        }
    }

    setupEventListeners() {
        // Login form
        const loginForm = document.getElementById('adminLoginForm');
        if (loginForm) {
            loginForm.addEventListener('submit', (e) => this.handleLogin(e));
        }

        // Logout button
        const logoutBtn = document.getElementById('logoutBtn');
        if (logoutBtn) {
            logoutBtn.addEventListener('click', () => this.logout());
        }

        // View website button
        const viewWebsiteBtn = document.getElementById('viewWebsite');
        if (viewWebsiteBtn) {
            viewWebsiteBtn.addEventListener('click', () => {
                window.open('index.html', '_blank');
            });
        }

        // Search and filter
        const searchInput = document.getElementById('searchProduct');
        if (searchInput) {
            searchInput.addEventListener('input', () => this.filterProducts());
        }

        const categoryFilter = document.getElementById('categoryFilter');
        if (categoryFilter) {
            categoryFilter.addEventListener('change', () => this.filterProducts());
        }

        // Edit price form
        const editPriceForm = document.getElementById('editPriceForm');
        if (editPriceForm) {
            editPriceForm.addEventListener('submit', (e) => this.handlePriceEdit(e));
        }

        // Modal close events
        this.setupModalEvents();

        // Backup and restore
        const backupBtn = document.getElementById('backupData');
        if (backupBtn) {
            backupBtn.addEventListener('click', () => this.backupData());
        }

        const restoreBtn = document.getElementById('restoreData');
        if (restoreBtn) {
            restoreBtn.addEventListener('click', () => this.restoreData());
        }

        const resetAllBtn = document.getElementById('resetAll');
        if (resetAllBtn) {
            resetAllBtn.addEventListener('click', () => this.resetAllPrices());
        }
    }

    setupModalEvents() {
        // Close modals when clicking outside
        document.addEventListener('click', (e) => {
            if (e.target.classList.contains('admin-modal')) {
                this.closeModal(e.target.id);
            }
        });

        // Close button events
        document.querySelectorAll('.admin-close').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const modal = e.target.closest('.admin-modal');
                if (modal) {
                    this.closeModal(modal.id);
                }
            });
        });
    }

    checkLoginStatus() {
        const isLoggedIn = localStorage.getItem('adminLoggedIn') === 'true';
        if (isLoggedIn) {
            this.showDashboard();
        } else {
            this.showLogin();
        }
    }

    handleLogin(e) {
        e.preventDefault();
        const username = document.getElementById('adminUsername').value;
        const password = document.getElementById('adminPassword').value;

        // Simple authentication (in production, use proper authentication)
        if (username === 'admin' && password === 'admin123') {
            localStorage.setItem('adminLoggedIn', 'true');
            this.showDashboard();
            this.showNotification('Đăng nhập thành công!', 'success');
        } else {
            this.showNotification('Tên đăng nhập hoặc mật khẩu không đúng!', 'error');
        }
    }

    logout() {
        localStorage.removeItem('adminLoggedIn');
        this.showLogin();
        this.showNotification('Đã đăng xuất thành công!', 'info');
    }

    showLogin() {
        document.getElementById('loginModal').classList.add('active');
        document.getElementById('adminDashboard').classList.remove('active');
    }

    showDashboard() {
        document.getElementById('loginModal').classList.remove('active');
        document.getElementById('adminDashboard').classList.add('active');
        this.renderProducts();
        this.updateStats();
    }

    openModal(modalId) {
        const modal = document.getElementById(modalId);
        if (modal) {
            modal.classList.add('active');
        }
    }

    closeModal(modalId) {
        const modal = document.getElementById(modalId);
        if (modal) {
            modal.classList.remove('active');
        }
    }

    updateStats() {
        const totalProducts = this.products.length;
        const changedProducts = this.products.filter(p => p.price !== p.originalPrice).length;
        const avgPrice = Math.round(this.products.reduce((sum, p) => sum + p.price, 0) / totalProducts);
        const categories = [...new Set(this.products.map(p => p.category))].length;

        document.getElementById('totalProducts').textContent = totalProducts;
        document.getElementById('changedProducts').textContent = changedProducts;
        document.getElementById('avgPrice').textContent = this.formatPrice(avgPrice);
        document.getElementById('totalCategories').textContent = categories;
    }

    renderProducts() {
        const tbody = document.getElementById('productsTableBody');
        if (!tbody) return;

        tbody.innerHTML = '';

        const searchTerm = document.getElementById('searchProduct')?.value.toLowerCase() || '';
        const categoryFilter = document.getElementById('categoryFilter')?.value || 'all';

        let filteredProducts = this.products.filter(product => {
            const matchesSearch = product.name.toLowerCase().includes(searchTerm);
            const matchesCategory = categoryFilter === 'all' || product.category === categoryFilter;
            return matchesSearch && matchesCategory;
        });

        filteredProducts.forEach(product => {
            const row = document.createElement('tr');
            
            const priceChanged = product.price !== product.originalPrice;
            const priceChange = product.price - product.originalPrice;
            const priceChangePercent = ((priceChange / product.originalPrice) * 100).toFixed(1);

            row.innerHTML = `
                <td>
                    <div class="product-name">${product.name}</div>
                    <small class="text-muted">${product.description}</small>
                </td>
                <td>
                    <span class="product-category category-${product.category}">
                        ${this.getCategoryName(product.category)}
                    </span>
                </td>
                <td>
                    <div class="price-original">${this.formatPrice(product.originalPrice)}</div>
                </td>
                <td>
                    <div class="price-current ${priceChanged ? 'price-changed' : ''}">${this.formatPrice(product.price)}</div>
                    ${priceChanged ? `
                        <div class="change-indicator ${priceChange > 0 ? 'change-up' : 'change-down'}">
                            <i class="fas fa-arrow-${priceChange > 0 ? 'up' : 'down'}"></i>
                            ${priceChangePercent}%
                        </div>
                    ` : ''}
                </td>
                <td>
                    <button class="action-btn btn-edit" onclick="adminPanel.openEditModal(${product.id})" title="Chỉnh sửa giá">
                        <i class="fas fa-edit"></i>
                    </button>
                    <button class="action-btn btn-reset" onclick="adminPanel.resetPrice(${product.id})" title="Khôi phục giá gốc">
                        <i class="fas fa-undo"></i>
                    </button>
                </td>
            `;

            tbody.appendChild(row);
        });
    }

    filterProducts() {
        this.renderProducts();
    }

    getCategoryName(category) {
        const categories = {
            herbal: 'Dược liệu',
            food: 'Thực phẩm',
            drink: 'Đồ uống',
            oil: 'Tinh dầu'
        };
        return categories[category] || category;
    }

    openEditModal(productId) {
        const product = this.products.find(p => p.id === productId);
        if (!product) return;

        document.getElementById('editProductId').value = product.id;
        document.getElementById('editProductName').value = product.name;
        document.getElementById('editOriginalPrice').value = product.originalPrice;
        document.getElementById('editCurrentPrice').value = product.price;

        this.openModal('editPriceModal');
    }

    handlePriceEdit(e) {
        e.preventDefault();
        
        const productId = parseInt(document.getElementById('editProductId').value);
        const newPrice = parseInt(document.getElementById('editCurrentPrice').value);

        if (newPrice < 0) {
            this.showNotification('Giá không thể âm!', 'error');
            return;
        }

        const product = this.products.find(p => p.id === productId);
        if (product) {
            const oldPrice = product.price;
            product.price = newPrice;
            
            this.saveProducts();
            this.renderProducts();
            this.updateStats();
            this.closeModal('editPriceModal');
            
            this.showNotification(
                `Đã cập nhật giá ${product.name} từ ${this.formatPrice(oldPrice)} thành ${this.formatPrice(newPrice)}`,
                'success'
            );
        }
    }

    resetPrice(productId) {
        const product = this.products.find(p => p.id === productId);
        if (product) {
            if (confirm(`Khôi phục giá gốc cho ${product.name}?`)) {
                product.price = product.originalPrice;
                this.saveProducts();
                this.renderProducts();
                this.updateStats();
                this.showNotification(`Đã khôi phục giá gốc cho ${product.name}`, 'success');
            }
        }
    }

    resetAllPrices() {
        if (confirm('Bạn có chắc muốn khôi phục giá gốc cho tất cả sản phẩm?')) {
            this.products.forEach(product => {
                product.price = product.originalPrice;
            });
            this.saveProducts();
            this.renderProducts();
            this.updateStats();
            this.showNotification('Đã khôi phục giá gốc cho tất cả sản phẩm', 'success');
        }
    }

    saveProducts() {
        localStorage.setItem('adminProducts', JSON.stringify(this.products));
        
        // Also update the main website's products (if on same domain)
        try {
            localStorage.setItem('websiteProducts', JSON.stringify(this.products));
        } catch (e) {
            console.log('Could not update website products');
        }
    }

    backupData() {
        const backupData = {
            products: this.products,
            timestamp: new Date().toISOString(),
            version: '1.0'
        };

        const dataStr = JSON.stringify(backupData, null, 2);
        const dataBlob = new Blob([dataStr], { type: 'application/json' });
        const url = URL.createObjectURL(dataBlob);
        
        const link = document.createElement('a');
        link.href = url;
        link.download = `backup-products-${new Date().toISOString().split('T')[0]}.json`;
        link.click();
        
        URL.revokeObjectURL(url);
        this.showNotification('Đã tải xuống file backup', 'success');
    }

    restoreData() {
        const input = document.createElement('input');
        input.type = 'file';
        input.accept = '.json';
        
        input.onchange = (e) => {
            const file = e.target.files[0];
            if (!file) return;

            const reader = new FileReader();
            reader.onload = (e) => {
                try {
                    const backupData = JSON.parse(e.target.result);
                    
                    if (backupData.products && Array.isArray(backupData.products)) {
                        if (confirm('Khôi phục dữ liệu sẽ ghi đè lên dữ liệu hiện tại. Bạn có chắc?')) {
                            this.products = backupData.products;
                            this.saveProducts();
                            this.renderProducts();
                            this.updateStats();
                            this.showNotification('Đã khôi phục dữ liệu thành công', 'success');
                        }
                    } else {
                        this.showNotification('File backup không hợp lệ', 'error');
                    }
                } catch (error) {
                    this.showNotification('Lỗi đọc file backup', 'error');
                }
            };
            reader.readAsText(file);
        };
        
        input.click();
    }

    formatPrice(price) {
        return new Intl.NumberFormat('vi-VN', {
            style: 'currency',
            currency: 'VND'
        }).format(price);
    }

    showNotification(message, type = 'info') {
        const notification = document.getElementById('adminNotification');
        const messageEl = document.getElementById('notificationMessage');
        
        if (notification && messageEl) {
            messageEl.textContent = message;
            notification.className = `admin-notification show ${type}`;
            
            // Auto hide after 5 seconds
            setTimeout(() => {
                notification.classList.remove('show');
            }, 5000);
        }
    }

    closeNotification() {
        const notification = document.getElementById('adminNotification');
        if (notification) {
            notification.classList.remove('show');
        }
    }
}

// Initialize admin panel when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    window.adminPanel = new AdminPanel();
});

// Global functions for button events
window.closeNotification = () => {
    if (window.adminPanel) {
        window.adminPanel.closeNotification();
    }
};
